2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: Dispatcher entered state INITED
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service Dispatcher is inited
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service Dispatcher is started
2018-03-07 17:13:06 INFO [main] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:117] - Registering class resourceManager.scheduler.SchedulerEventType for class resourceManager.scheduler.Scheduler
2018-03-07 17:13:06 INFO [main] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:117] - Registering class resourceManager.applicationMasterLauncher.AMLauncherEventType for class resourceManager.applicationMasterLauncher.ApplicationMasterLauncher
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: resourceManager.applicationMasterLauncher.ApplicationMasterLauncher entered state INITED
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service resourceManager.applicationMasterLauncher.ApplicationMasterLauncher is inited
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service resourceManager.applicationMasterLauncher.ApplicationMasterLauncher is started
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: ClientRMService entered state INITED
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service ClientRMService is inited
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service ClientRMService is started
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: resourceManager.resourceTrackerService.ResourceTrackerService entered state INITED
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service resourceManager.resourceTrackerService.ResourceTrackerService is inited
2018-03-07 17:13:06 DEBUG [main] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:85] - util check: resourceTrackerService start listen on port :8002
2018-03-07 17:13:06 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service resourceManager.resourceTrackerService.ResourceTrackerService is started
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: Dispatcher entered state INITED
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service Dispatcher is inited
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service Dispatcher is started
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl entered state INITED
2018-03-07 17:13:09 INFO [main] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:177] - Initialized nodemanager for null: physical-memory=1024 virtual-memory=2048 virtual-cores=8
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl is inited
2018-03-07 17:13:09 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:102] - util check: registerNodeManager:RegisterNodeManagerRequest [resource=<memory:1024, vCores:8>, nodeId=localhost:8001]
2018-03-07 17:13:09 INFO [IPC Server handler 0 on 8002] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:117] - Registering class resourceManager.RMNodeEventType for class resourceManager.RMNodeImpl
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeEvent.EventType: STARTED
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STARTED
2018-03-07 17:13:09 INFO [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:382] - localhost:8001 Node Transitioned from NEW to RUNNING
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeAddedSchedulerEvent.EventType: NODE_ADDED
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_ADDED
2018-03-07 17:13:09 DEBUG [main] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:102] - util check: registerNodeManager response:RegisterNodeManagerResponsePBImpl [nodeAction=NORMAL]
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl is started
2018-03-07 17:13:09 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:13:09 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:1024, vCores:8>
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=0
2018-03-07 17:13:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:1024, vCores:8>
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[CompositeService.java:49] - Adding service containers-launcher
2018-03-07 17:13:09 INFO [main] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:117] - Registering class nodeManager.resourceLocalizationService.LocalizerEventType for class nodeManager.resourceLocalizationService.ResourceLocalizationService
2018-03-07 17:13:09 INFO [main] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:117] - Registering class nodeManager.launcher.ContainersLauncherEventType for class nodeManager.launcher.ContainersLauncher
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[CompositeService.java:49] - Adding service Dispatcher
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[CompositeService.java:49] - Adding service nodeManager.resourceLocalizationService.ResourceLocalizationService
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: nodeManager.containerManagerImpl.ContainerManagerImpl entered state INITED
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[CompositeService.java:80] - nodeManager.containerManagerImpl.ContainerManagerImpl: initing services, size=3
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: containers-launcher entered state INITED
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service containers-launcher is inited
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: Dispatcher entered state INITED
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service Dispatcher is inited
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: nodeManager.resourceLocalizationService.ResourceLocalizationService entered state INITED
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service:  entered state INITED
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service  is inited
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service nodeManager.resourceLocalizationService.ResourceLocalizationService is inited
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service nodeManager.containerManagerImpl.ContainerManagerImpl is inited
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[CompositeService.java:91] - nodeManager.containerManagerImpl.ContainerManagerImpl: starting services, size=3
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service containers-launcher is started
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service Dispatcher is started
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service  is started
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service nodeManager.resourceLocalizationService.ResourceLocalizationService is started
2018-03-07 17:13:09 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service nodeManager.containerManagerImpl.ContainerManagerImpl is started
2018-03-07 17:13:12 DEBUG [main] service.AbstractService[AbstractService.java:197] - Service: client.YarnClientImpl entered state INITED
2018-03-07 17:13:12 DEBUG [main] service.AbstractService[AbstractService.java:99] - Service client.YarnClientImpl is inited
2018-03-07 17:13:12 DEBUG [main] service.AbstractService[AbstractService.java:134] - Service client.YarnClientImpl is started
2018-03-07 17:13:12 DEBUG [main] client.YarnClientImpl[YarnClientImpl.java:71] - util check: new  created ApplicationId application_20170530_0117
2018-03-07 17:13:12 DEBUG [main] client.YarnClientImpl[YarnClientImpl.java:78] - util check: in YarnClient
2018-03-07 17:13:12 INFO [IPC Server handler 0 on 8000] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:117] - Registering class resourceManager.RMAppEventType for class resourceManager.RMAppImpl
2018-03-07 17:13:12 INFO [IPC Server handler 0 on 8000] resourceManager.ClientRMService.ClientRMService[ClientRMService.java:134] - Application with id 117 submitted by user root
2018-03-07 17:13:12 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMAppEvent.EventType: START
2018-03-07 17:13:12 DEBUG [AsyncDispatcher event handler] resourceManager.RMAppImpl[RMAppImpl.java:398] - Processing event for application_20170530_0117 of type START
2018-03-07 17:13:12 DEBUG [main] client.YarnClientImpl[YarnClientImpl.java:80] - util check: Submitted application application_20170530_0117 to ResourceManager at localhost/127.0.0.1:8000result status:ResultStatus [resultStatus=ok]
2018-03-07 17:13:12 INFO [AsyncDispatcher event handler] resourceManager.RMAppImpl[RMAppImpl.java:410] - application_20170530_0117 State change from NEW to NEW_SAVING
2018-03-07 17:13:12 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMAppEvent.EventType: APP_SAVED
2018-03-07 17:13:12 DEBUG [AsyncDispatcher event handler] resourceManager.RMAppImpl[RMAppImpl.java:398] - Processing event for application_20170530_0117 of type APP_SAVED
2018-03-07 17:13:17 INFO [AsyncDispatcher event handler] resourceManager.RMAppImpl[RMAppImpl.java:410] - application_20170530_0117 State change from NEW_SAVING to SUBMITTED
2018-03-07 17:13:17 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.AppAddedSchedulerEvent.EventType: APP_ADDED
2018-03-07 17:13:17 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type APP_ADDED
2018-03-07 17:13:17 ERROR [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:53] - Calling allocate on removed or non existant application appattempt_20170530_0117_000001
2018-03-07 17:13:17 INFO [Thread-7] resourceManager.appMaster.AppMaster[AppMaster.java:53] - appmaster 未获取到资源，重新进行allocate资源请求
2018-03-07 17:13:17 INFO [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:175] - Application Submission: application_20170530_0117 from root, currently active: 1
2018-03-07 17:13:19 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:13:19 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:1024, vCores:8>
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:13:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:1024, vCores:8>
2018-03-07 17:13:22 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:92] - allocate: pre-update applicationId=appattempt_20170530_0117_000001 application=resourceManager.scheduler.SchedulerApp@77cd6a5b
2018-03-07 17:13:22 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:98] - util check: 当前请求量：<memory:50, vCores:1>
2018-03-07 17:13:22 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:101] - allocate: post-update applicationId=appattempt_20170530_0117_000001 application=resourceManager.scheduler.SchedulerApp@77cd6a5b
2018-03-07 17:13:22 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:1024, vCores:8> currentConsumption=0
2018-03-07 17:13:22 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8bcc4
2018-03-07 17:13:22 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:105] - allocate: applicationId=appattempt_20170530_0117_000001 #ask=1
2018-03-07 17:13:22 INFO [Thread-7] resourceManager.appMaster.AppMaster[AppMaster.java:53] - appmaster 未获取到资源，重新进行allocate资源请求
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:92] - allocate: pre-update applicationId=appattempt_20170530_0117_000001 application=resourceManager.scheduler.SchedulerApp@77cd6a5b
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:1024, vCores:8> currentConsumption=0
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8bcc4
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:98] - util check: 当前请求量：<memory:50, vCores:1>
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:101] - allocate: post-update applicationId=appattempt_20170530_0117_000001 application=resourceManager.scheduler.SchedulerApp@77cd6a5b
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:1024, vCores:8> currentConsumption=0
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8bcc4
2018-03-07 17:13:27 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:105] - allocate: applicationId=appattempt_20170530_0117_000001 #ask=1
2018-03-07 17:13:27 INFO [Thread-7] resourceManager.appMaster.AppMaster[AppMaster.java:53] - appmaster 未获取到资源，重新进行allocate资源请求
2018-03-07 17:13:29 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:13:29 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:1024, vCores:8>
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:1024, vCores:8> currentConsumption=0
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8bcc4
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:545] - assignContainers: node=localhost:8001 application=117 priority=1 assignableContainers=1 request=resourceManager.scheduler.ResourceRequest@29b8bcc4 type=OFF_SWITCH
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.AppSchedulingInfo[AppSchedulingInfo.java:254] - allocate: applicationId=application_20170530_0117 container=container_20170530_0117_01_000001 host=localhost:8001
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:89] - allocate: applicationAttemptId=appattempt_20170530_0117_000001 container=container_20170530_0117_01_000001 host=localhost type=OFF_SWITCH
2018-03-07 17:13:29 INFO [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerNode[SchedulerNode.java:87] - Assigned container container_20170530_0117_01_000001 of capacity <memory:50, vCores:1> on host localhost:8001, which currently has 1 containers, <memory:50, vCores:1> used and <memory:974, vCores:7> available
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:471] - assignContainersOnNode: node=localhost:8001 application=117 priority=1 #assigned=1
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:1024, vCores:8> currentConsumption=50
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:13:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:974, vCores:7>
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:92] - allocate: pre-update applicationId=appattempt_20170530_0117_000001 application=resourceManager.scheduler.SchedulerApp@77cd6a5b
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:974, vCores:7> currentConsumption=50
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:98] - util check: 当前请求量：<memory:50, vCores:1>
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:101] - allocate: post-update applicationId=appattempt_20170530_0117_000001 application=resourceManager.scheduler.SchedulerApp@77cd6a5b
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:974, vCores:7> currentConsumption=50
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8bcc4
2018-03-07 17:13:32 DEBUG [Thread-7] resourceManager.scheduler.Scheduler[Scheduler.java:105] - allocate: applicationId=appattempt_20170530_0117_000001 #ask=1
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.applicationMasterLauncher.AMLauncherEvent.EventType: LAUNCH
2018-03-07 17:13:32 DEBUG [IPC Server handler 0 on 8001] nodeManager.containerManagerImpl.ContainerManagerImpl[ContainerManagerImpl.java:127] - util check: StartContainersResponse request:StartContainerRequest [containerLaunchContext=ContainerLaunchContext [localResources={file0=LocalResource [resource=URL [host=192.168.2.134, port=8080, file=AppStore/Download?applicationId=application_20170530_0117&file=task0.jar], size=500, type=file, timestamp=20170530]}, environment={}, commands=[java -jar, task0.jar], resource=<memory:50, vCores:1>, containerId=container_20170530_0117_01_000001, applicationId=application_20170530_0117], user=root]
2018-03-07 17:13:32 INFO [IPC Server handler 0 on 8001] nodeManager.containerManagerImpl.ContainerManagerImpl[ContainerManagerImpl.java:146] - Start request for container_20170530_0117_01_000001 by user root
2018-03-07 17:13:32 INFO [IPC Server handler 0 on 8001] nodeManager.containerManagerImpl.ContainerManagerImpl[ContainerManagerImpl.java:173] - Creating a new application reference for app application_20170530_0117
2018-03-07 17:13:32 INFO [IPC Server handler 0 on 8001] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:117] - Registering class nodeManager.container.ContainerEventType for class nodeManager.container.ContainerImpl
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event nodeManager.container.ContainerEvent.EventType: INIT_CONTAINER
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.container.ContainerImpl[ContainerImpl.java:709] - Processing container_20170530_0117_01_000001 of type INIT_CONTAINER
2018-03-07 17:13:32 DEBUG [pool-2-thread-1] resourceManager.applicationMasterLauncher.AMLauncher[AMLauncher.java:132] - util check: AMLauncher.startContainers()StartContainersResponse [result=ok]
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.container.ContainerImpl[ContainerImpl.java:448] - util check: RequestResourcesTransition.request{PUBLIC=[nodeManager.resourceLocalizationService.LocalResourceRequest@6426f7af]}
2018-03-07 17:13:32 INFO [AsyncDispatcher event handler] nodeManager.container.ContainerImpl[ContainerImpl.java:724] - Container container_20170530_0117_01_000001 transitioned from NEW to LOCALIZING
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event nodeManager.resourceLocalizationService.LocalizerResourceRequestEvent.LocalizerResourceRequestEvent [context=nodeManager.resourceLocalizationService.LocalizerContext@4685d9a4, resource={PUBLIC=[nodeManager.resourceLocalizationService.LocalResourceRequest@6426f7af]}, vis=PUBLIC]
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.resourceLocalizationService.ResourceLocalizationService[ResourceLocalizationService.java:156] - Processing container_20170530_0117_01_000001 of type REQUEST_RESOURCE_LOCALIZATION
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.resourceLocalizationService.ResourceLocalizationService[ResourceLocalizationService.java:212] - util check: addResource() request:LocalizerResourceRequestEvent [context=nodeManager.resourceLocalizationService.LocalizerContext@4685d9a4, resource={PUBLIC=[nodeManager.resourceLocalizationService.LocalResourceRequest@6426f7af]}, vis=PUBLIC]
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.resourceLocalizationService.ResourceLocalizationService[ResourceLocalizationService.java:214] - util check: addResource().mkdir.path:/tmp/clustermanager/filecache/application_20170530_0117/container_20170530_0117_01_000001
2018-03-07 17:13:32 DEBUG [pool-2-thread-1] nodeManager.resourceLocalizationService.FSDownload[FSDownload.java:72] - FSDownload.call():request url:http://192.168.2.134:8080/AppStore/Download?applicationId=application_20170530_0117&file=task0.jar
2018-03-07 17:13:32 DEBUG [pool-2-thread-1] nodeManager.resourceLocalizationService.FSDownload[FSDownload.java:103] - FSDownload.call():下载完成
2018-03-07 17:13:32 DEBUG [Public Localizer] nodeManager.resourceLocalizationService.ResourceLocalizationService[ResourceLocalizationService.java:245] - util check: run():下载到的本地目录/tmp/clustermanager/filecache/application_20170530_0117/container_20170530_0117_01_000001
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event nodeManager.container.ContainerEvent.EventType: RESOURCE_LOCALIZED
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.container.ContainerImpl[ContainerImpl.java:709] - Processing container_20170530_0117_01_000001 of type RESOURCE_LOCALIZED
2018-03-07 17:13:32 INFO [AsyncDispatcher event handler] nodeManager.container.ContainerImpl[ContainerImpl.java:724] - Container container_20170530_0117_01_000001 transitioned from LOCALIZING to LOCALIZED
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event nodeManager.launcher.ContainersLauncherEvent.EventType: LAUNCH_CONTAINER
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.launcher.ContainersLauncher[ContainersLauncher.java:111] - Processing container_20170530_0117_01_000001 of type LAUNCH_CONTAINER
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.shell.Shell[Shell.java:320] - setsid is not available on this machine. So not using it.
2018-03-07 17:13:32 DEBUG [AsyncDispatcher event handler] nodeManager.shell.Shell[Shell.java:324] - setsid exited with exit code 0
2018-03-07 17:13:32 DEBUG [pool-3-thread-1] nodeManager.launcher.ContainersLauncher[ContainerLaunch.java:176] - commands from client:[java -jar, task0.jar]
2018-03-07 17:13:32 DEBUG [pool-3-thread-1] nodeManager.launcher.ContainersLauncher[ContainerLaunch.java:179] - launch script path: /tmp/clustermanager/usercache/root/appcache/application_20170530_0117/container_20170530_0117_01_000001/launch_container.sh
2018-03-07 17:13:32 DEBUG [pool-3-thread-1] nodeManager.ContainerExecutor.LinuxContainerExecutor[LinuxContainerExecutor.java:186] - util check: containerWorkDir path: /tmp/clustermanager/usercache/root/appcache/application_20170530_0117/container_20170530_0117_01_000001
2018-03-07 17:13:32 DEBUG [pool-3-thread-1] nodeManager.ContainerExecutor.LinuxContainerExecutor[LinuxContainerExecutor.java:209] - util check: launchContainer command: [bash, /tmp/clustermanager/usercache/root/appcache/application_20170530_0117/container_20170530_0117_01_000001/launch_container.sh]
2018-03-07 17:13:33 INFO [pool-3-thread-1] nodeManager.ContainerExecutor.ContainerExecutor[ContainerExecutor.java:176] - 
2018-03-07 17:13:39 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:13:39 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:974, vCores:7>
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:974, vCores:7> currentConsumption=50
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8bcc4
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:545] - assignContainers: node=localhost:8001 application=117 priority=1 assignableContainers=1 request=resourceManager.scheduler.ResourceRequest@29b8bcc4 type=OFF_SWITCH
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.AppSchedulingInfo[AppSchedulingInfo.java:254] - allocate: applicationId=application_20170530_0117 container=container_20170530_0117_01_000002 host=localhost:8001
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:89] - allocate: applicationAttemptId=appattempt_20170530_0117_000001 container=container_20170530_0117_01_000002 host=localhost type=OFF_SWITCH
2018-03-07 17:13:39 INFO [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerNode[SchedulerNode.java:87] - Assigned container container_20170530_0117_01_000002 of capacity <memory:50, vCores:1> on host localhost:8001, which currently has 2 containers, <memory:100, vCores:2> used and <memory:924, vCores:6> available
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:471] - assignContainersOnNode: node=localhost:8001 application=117 priority=1 #assigned=1
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:974, vCores:7> currentConsumption=100
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:13:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:13:49 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:13:49 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:13:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:13:59 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:13:59 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:13:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:14:09 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:14:09 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:14:19 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:14:19 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:14:29 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:14:29 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:14:39 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:14:39 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:14:49 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:14:49 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:14:59 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:14:59 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:14:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:15:09 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:15:09 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:15:19 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:15:19 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:15:29 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:15:29 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:15:39 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:15:39 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:15:49 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:15:49 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:15:59 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:15:59 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:15:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:16:09 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:16:09 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:16:19 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:16:19 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:16:29 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:16:29 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:16:39 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:16:39 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:16:49 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:16:49 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:49 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:16:59 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:16:59 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:16:59 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:17:09 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:17:09 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:09 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:17:19 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:17:19 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:19 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:17:29 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:17:29 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:29 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
2018-03-07 17:17:39 DEBUG [IPC Server handler 0 on 8002] resourceManager.resourceTrackerService.ResourceTrackerService[ResourceTrackerService.java:127] - util check: ResourceTrackerService.nodeHeartbeat()NodeHeartbeatRequest [nodeId=localhost:8001, keepAliveApplications=[]]
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.RMNodeStatusEvent.EventType: STATUS_UPDATE
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.RMNodeImpl[RMNodeImpl.java:371] - Processing localhost:8001 of type STATUS_UPDATE
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] dispatcher.core.AsyncDispatcher[AsyncDispatcher.java:84] - Dispatching the event resourceManager.scheduler.NodeUpdateSchedulerEvent.EventType: NODE_UPDATE
2018-03-07 17:17:39 DEBUG [Node Status Updater] nodeManager.nodeStatusUpdater.NodeStatusUpdaterImpl[NodeStatusUpdaterImpl.java:131] - util check: nodeHeartbeat response :NodeHeartbeatResponse [containersToCleanup=[], applicationsToCleanup=[], nodeAction=NORMAL, nextHeartBeatInterval=10000]
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:119] - Processing scheduler of type NODE_UPDATE
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:323] - Node heartbeat localhost:8001 available resource = <memory:924, vCores:6>
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:370] - assignContainers: node=localhost:8001 #applications=1
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:378] - pre-assignContainers
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:406] - post-assignContainers
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:243] - showRequests: application=application_20170530_0117 headRoom=<memory:924, vCores:6> currentConsumption=100
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.SchedulerApp[SchedulerApp.java:247] - showRequests: application=application_20170530_0117 request=resourceManager.scheduler.ResourceRequest@29b8b45b
2018-03-07 17:17:39 DEBUG [AsyncDispatcher event handler] resourceManager.scheduler.Scheduler[Scheduler.java:331] - Node after allocation localhost:8001 resource = <memory:924, vCores:6>
