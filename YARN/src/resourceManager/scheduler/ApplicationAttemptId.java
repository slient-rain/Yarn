package resourceManager.scheduler;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.text.NumberFormat;

import rpc.io.Writable;

/**
 * ApplicationId+
 * <p><code>ApplicationAttemptId</code> denotes the particular <em>attempt</em>
 * of an <code>ApplicationMaster</code> for a given {@link ApplicationId}.</p>
 * 
 * <p>Multiple attempts might be needed to run an application to completion due
 * to temporal failures of the <code>ApplicationMaster</code> such as hardware
 * failures, connectivity issues etc. on the node on which it was scheduled.</p>
 */

public class ApplicationAttemptId implements Comparable<ApplicationAttemptId> ,Writable{

	public static final String appAttemptIdStrPrefix = "appattempt_";
	ApplicationId  applicationId;
	int attemptId;
	public ApplicationAttemptId(){
		applicationId=new ApplicationId();
	}
	public ApplicationAttemptId(ApplicationId applicationId, int attemptId) {
		super();
		this.applicationId = new ApplicationId(applicationId.getId(),applicationId.getClusterTimestamp());
		this.attemptId = attemptId;
	}

	public static ApplicationAttemptId newInstance(ApplicationId appId,	int attemptId) {
		return new ApplicationAttemptId(appId, attemptId);
	}

	

	public ApplicationId getApplicationId() {
		return applicationId;
	}

	public void setApplicationId(ApplicationId applicationId) {
		this.applicationId = applicationId;
	}

	public int getAttemptId() {
		return attemptId;
	}

	public void setAttemptId(int attemptId) {
		this.attemptId = attemptId;
	}



	static final ThreadLocal<NumberFormat> attemptIdFormat =
			new ThreadLocal<NumberFormat>() {
		@Override
		public NumberFormat initialValue() {
			NumberFormat fmt = NumberFormat.getInstance();
			fmt.setGroupingUsed(false);
			fmt.setMinimumIntegerDigits(6);
			return fmt;
		}
	};

	@Override
	public int hashCode() {
		// Generated by eclipse.
		final int prime = 347671;
		int result = 5501;
		ApplicationId appId = getApplicationId();
		result = prime * result +  appId.hashCode();
		result = prime * result + getAttemptId();
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ApplicationAttemptId other = (ApplicationAttemptId) obj;
		if (!this.getApplicationId().equals(other.getApplicationId()))
			return false;
		if (this.getAttemptId() != other.getAttemptId())
			return false;
		return true;
	}

	@Override
	public int compareTo(ApplicationAttemptId other) {
		int compareAppIds = this.getApplicationId().compareTo(
				other.getApplicationId());
		if (compareAppIds == 0) {
			return this.getAttemptId() - other.getAttemptId();
		} else {
			return compareAppIds;
		}
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(appAttemptIdStrPrefix);
		sb.append(this.getApplicationId().getClusterTimestamp()).append("_");
		sb.append(ApplicationId.appIdFormat.get().format(
				this.getApplicationId().getId()));
		sb.append("_").append(attemptIdFormat.get().format(getAttemptId()));
		return sb.toString();
	}

	@Override
	public void write(DataOutput out) throws IOException {
		applicationId.write(out);
		out.writeInt(attemptId);
		
	}

	@Override
	public void readFields(DataInput in) throws IOException {
		applicationId.readFields(in);
		attemptId=in.readInt();
		
	}

}